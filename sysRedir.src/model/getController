<?php

class getController  {

    protected $mySubs = array(

            'displayname'   => 'displayname',
            'sippass'       => 'sippass',
            'sipaccount'    => 'sipaccount',
            'sipurl'        => 'sipurl',
            'provurl'       => 'provurl',
            'ldapbase'      => 'ldapbase',
            'ldapbuser'     => 'ldapbuser',
            'ldappass'      => 'ldappass',
            'ldaphost'      => 'ldaphost',
            'ldapbase'      => 'ldapbase',
            'ep_user_pass'  => 'ep_user_pass',
            'ep_user'       => 'ep_user',
            'ep_admin_pass' => 'ep_admin_pass'                      
    );


    public function __construct($db,$request,$response) {

       $this->db = $db;
       $this->request = $request;
       $this->response = $response;
       $this->loglevel = 5;       
    }


/**
 * get fetch all for an endpoint
 * @param  var $table  table name
 * @return json        return result as json string
 */
    public function provision($macfile=null) {

    $this->logit ("processing URI " . $_SERVER["REQUEST_URI"]);
// see if we have a mac in the GET
    if (isset($_GET['mac'])) {
        $mac = strtolower($_GET['mac']);
        logit ("Found MAC from query " . $mac);        
    } 
    else {  
// try to harvest a MAC address
        if (preg_match('/([0-9A-Fa-f]{12})(.*)$/',$macfile,$matches)  ) {
                    $mac = $matches[1];
                    $fname = $matches[2];
                    $this->logit ("Found MAC From Filename " . $macfile);
        }
        else {
                    $result = "Couldn't REGEX MAC $mac - sending 404 ";
                    $this->logit ($result);
                    return $this->response->withJson($result,404);
        }
    }
//    check file type
    if (!empty($fname)) {
// we only recognise ".cfg" as a good one
        if ($fname != '.cfg') {
            $result = "Unsupported filename $mac.$fname - sending 404 ";
            $this->logit ($result);
            return $this->response->withJson($result,404);        
        }  
    }

    try {
        $sth = $this->db->prepare("SELECT T1.*, T2.ep_user, T2.ep_user_pass, T2.ep_admin_pass, T2.provurl, T2.sipurl, T2.ldappass, T2.ldaphost, T2.ldapbase, T2.ldapuser FROM endpoint T1 JOIN customer T2 WHERE T1.customer=T2.pkey AND T1.pkey=?");
        $sth->execute(array($mac));
        $endpoint = $sth->fetch();
    } catch (exception $e) {
        $result ['reason'] = $e->getMessage();
        return $this->response->withJson($result,500);        
    } 
    if (empty($endpoint)) {
        $result ['reason'] = $mac . " Not Found";
        return $this->response->withJson($result,404);   
    } 
// Log the header    
    $this->logHeader();

    switch ($endpoint['mode']) {
        case 0:
            $result ['reason'] = $mac . " Inactive";
            return $this->response->withJson($result,404);

        case 1:
            $redirURL = $endpoint['redirecturl'] . $_SERVER["REQUEST_URI"]; 

            $this->logit("mode is Redirect $redirURL Sending 301 ");  
            return $this->response->withRedirect($redirURL, 301); 

        case 2:
//          $result ['reason'] = $mac . " Provision not yet implemented";
//          return $this->response->withJson($result,404);
            break;

        default:
            $result ['reason'] = $mac . " Invalid Request";
            return $this->response->withJson($result,500);  
    }

// update the phone model (it may have changed or it may not be present yet)
    $model = $this->logUA();
    if (!empty($model)) {
        if ($model != $endpoint['device']) {
// set the model in the extension record    
            $this->logit ("Device model differs between UA and DB.  UA = $model, DB = " . $endpoint['device'] );
            try {
                $sql = $this->db->prepare('UPDATE endpoint SET device=? WHERE pkey = ?');
                $sql->execute(array($model,$endpoint['pkey']));
            } catch (Exception $e) {
                $result['reason'] = $e->getMessage();
                $this->logit("Unable update mac file for $mac  - DB error $errorMsg");
                return $this->response->withJson($result,404);
            }
        }
    }
    $this->logit("Unable find model in URI for $mac");      

   

//header('Content-type: text/plain');

// fetch the template

//create an empty loopcheck array 
    $loopCheck = array();
    $rawConfig = $endpoint['provision'] . "\n";

// expand the template stack    
    $this->cleanConfig($rawConfig,$retstring,$loopcheck);

// get ready to substitute into it from the values we have


// substitute real values into the output   

    foreach ($this->mySubs as $key => $val) {

        if (!empty($endpoint[$key])) {
            $retstring = preg_replace ( ' / \$' .  $val . ' / ', $endpoint[$key], $retstring); 
        }
        else {
            $this->logit("endpoint var $key is empty - can't provision it, ignoring ");
        }

    }

// try to update lasteen
    try {
        if (empty($endpoint['firstseen'])) {
            $sql = $this->db->prepare('UPDATE endpoint SET z_firstseen = current_date(), z_lastseen = current_date() WHERE pkey = ?');
    }
    else {
        $sql = $this->db->prepare('UPDATE endpoint SET z_lastseen = current_date() WHERE pkey = ?');
    }
    $sql->execute(array($endpoint['pkey']));
    } catch (Exception $e) {
    $result['reason'] = $e->getMessage();
        $this->logit("Unable to update lastseen/firstseen - DB error " . $result['reason']);
        return $this->response->withJson($result,404);
    }
    
// and, if we got this far,  finally ship it out

    $this->logit("sending config $mac$fname");

    $retstring = str_replace("\r", "", $retstring);
    $pvarray = explode(PHP_EOL,$retstring);
    $this->logit ("====================provisioning stream================>",4);
    foreach($pvarray as $row) {
        $this->logit (trim($row),4);
    }
    $this->logit ("====================End of stream======================>",4);
// send it
    $body = $this->response->getBody();
    return $body->write($retstring);  

}
/**
 * cleanConfig Recursive function to expand the provisioning stream into a single string
 * @param  [string] $rawConfig  Input data file
 * @param  [string] &$retstring expanded return string
 * @param  [array] &$loopCheck loopchecker, a given INCLUDE will only be loaded once
 * @return NULL
 */
private function cleanConfig($rawConfig,&$retstring,&$loopCheck) { 

  $inline=False;
  $lines = explode("\n", $rawConfig);

  foreach ($lines as $line) {
    $line = preg_replace("/\r/", "", $line);               
    
// check for INCLUDE and recurse
    if (preg_match(' /^[;#]INCLUDE\s*([\w_\-\.\/\(\)\s]*)\s*$/',$line,$match)) {
        $nextPkey = trim($match[1]);
        try {
            $configs = $this->db->prepare('select pkey, provision from template where pkey = ?');
            $configs->execute(array($nextPkey));
            $thisConfig = $configs->fetchObject();
        } catch (Exception $e) {
            $errorMsg = $e->getMessage();
            $this->logit("Could not retrieve sub-template $nextPkey  - DB error $errorMsg"); 
            continue;         
        }
        if (!is_object($thisConfig)) {
            $this->logit("Unable to send Descriptor file for $nextPkey - skipping");
            continue;
        }
        if (isset($loopcheck[$nextPkey])) {
            $this->logit("LOOP FOUND in INCLUDES for $nextPkey - won't touch it again!");
            continue;
        }
        if (! isset ($thisConfig)) {
            $this->logit("Can't find INCLUDE for $nextPkey - skipping");
            continue;
        }
        $loopcheck[$nextPkey] = true;
        $rawConfig = $thisConfig->provision;    
        $this->cleanConfig($rawConfig,$retstring,$loopCheck); 
        continue;
    }   
    $retstring .= $line . "\n";
  }
}

private function logUA() {

    $manufacturer_regex = Array(
        "snom" => '(snom\w+)\-SIP',
        "yealink" => 'Yealink\sSIP-([\w-]+)\s',
        "yealinkDECT" => 'Yealink\s([\w-]+)\s',
        "panasonic" => 'Panasonic_(KX-\w+)\/',
    );
  
    $model = NULL;
    if (isset($_SERVER["HTTP_USER_AGENT"])) {
        $this->logit ("Found UA " . $_SERVER["HTTP_USER_AGENT"]);
        foreach ($manufacturer_regex as $manex) {
            if (preg_match('/' . $manex . '/' ,$_SERVER["HTTP_USER_AGENT"],$matches)) {
                $model = $matches[1];
                break;
            }
        }
    }
  
    if ($model) {
        $this->logit ("Found phone model $model from UA");
        return $model;
    }
    $useragent = null;
    if (isset($_SERVER["HTTP_USER_AGENT"])) {
        $useragent = $_SERVER["HTTP_USER_AGENT"];
    }
    $this->logit ("UA not found or unknown $useragent" );
//  send404();
} 

private function logHeader() {

    foreach (getallheaders() as $name => $value) {
        $this->logit( "HTTP Header -> $name = $value");
    }

}  

private function logIt($someText,$userloglevel=0) {

    if ($userloglevel <= $this->loglevel) {   
        syslog(LOG_WARNING, $_SERVER["REMOTE_ADDR"] . " " . $someText);
    }
}

}
