<?php


class postController  {

    	protected $columnName = array(
			'customer' => array (
				'pkey' => true,
				'dflt_user_pass' => true,
				'dflt_admin_pass' => true,
				'dflt_redirect' => true,
				'dflt_sip_reg' => true,
				'parent_pkey' => true
			),
			'endpoint' => array (
				'pkey' => true,
				'customer_pkey' => true,
				'displayName' => true,
				'redirecturl' => true,
				'mode' => true,
				'sip_account' => true,
				'sip_pass' => true,
				'sip_reg' => true,
				'transport' => true
			),
			'template' => array (
				'pkey' => true,
				'parent_pkey' => true,
				'provision' => true,
				'technology' => true
			)
		); 	

    public function __construct($db,$input,$response)
    {
       	
       $this->db = $db;
       $this->input = $input;
       $this->response = $response;

    }

    public function post($table) 
    { 
		if (empty($input['pkey'])) {
        	$result ['reason'] = "EMPTY PRIMARY KEY";
            return $this->response->withJson($result,400);      	
    	}

    	$cols = null;
    	$prep = null;
    	$vals = array();
    	foreach ($this->input as $key => $val) {
    		if (empty($this->columnName[$table][$key])) {
    			$result ['reason'] = "Invalid column " . $table . ' => ' . $key;
            	return $this->response->withJson($result,403);
    		}
    		else {
    			$cols .= $key . ',';
    			$prep .= '?,';
    			$vals[] = $val;
    		}
    	}

    	if (empty($cols)) {
    			$result ['reason'] = "Empty column list";
            	return $this->response->withJson($result,403);    		
    	}
    	$cols = rtrim($cols,',');
    	$prep = rtrim($prep,',');

   		try {
        	$sth = $this->db->prepare("INSERT INTO $table ($cols) values ($prep)");
        	$sth->execute($vals);
//        	$sth->execute(array($input['mac'],$input['redirecturl'],$input['customer'],getRemoteIP()) );
        } catch (exception $e) {
        	if($e->errorInfo[1] === 1062) {
        		$result ['reason'] = "Duplicate KEY " . $this->input['pkey'];
        		return $this->response->withJson($result,403);
        	}
        	$result ['reason'] = $e->getMessage();
            return $this->response->withJson($result,500);        
        }        
    	return $this->response->withJson($this->input,201);
    }

	public function getVendorFromMac($mac) {
//      $this->helper->logit("GETV mac is $mac  ",5 );
        $short_vendor = NULL;
        $shortmac = strtoupper(substr($mac,0,6));
        preg_match(" /^([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])$/ ", $shortmac,$matches);
        $findmac = $matches[1] . ':' . $matches[2] . ':' . $matches[3];
//      $this->helper->logit("GETV findmac is $findmac  ",5 );
        $vendorline = `grep -i $findmac  ../../scripts/manuf.txt`;
        $delim="\t";
        $short_vendor_cols = explode($delim,$vendorline,3);
        if ( ! empty($short_vendor_cols[1]) ) {
            $short_vendor = $short_vendor_cols[1];
        }
        if (preg_match('/(Snom|Panasonic|Yealink|Polycom|Cisco|Gigaset|Aastra|Grandstream|Vtech)/i',$short_vendor_cols[2],$matches)) {
                $short_vendor = $matches[1];
        }
        else {
            if (preg_match('/(Snom|Panasonic|Yealink|Polycom|Cisco|Gigaset|Aastra|Grandstream|Vtech)/i',$short_vendor,$matches)) {
                $short_vendor = $matches[1];
            }
            else {
//              print_r($findmac);
                return 0;
            }
        }
//      $this->helper->logit("GETV shortv is $short_vendor  ",5 );
        return $short_vendor;
	}
}