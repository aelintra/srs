<?php

class postController  {

//require_once __DIR__ . "/model/helperClass";
//
//

/**
 * $columnName White listed columns by table/name
 * @var array
 */
        protected $columnName = array(
            'customer' => array (
                'pkey' => true,
                'ep_user' => true,                
                'ep_user_pass' => true,
                'ep_admin_pass' => true,
                'dflt_redirecturl' => true,
                'ldapbase' => true,
                'ldaphost' => true,
                'ldapuser' => true,
                'ldappass' => true,
                'provurl' => true,
                'redirecturl' => true,
                'sipurl' => true,                
                'parent' => true,
                'z_updater' => true
            ),
            'endpoint' => array (
                'pkey' => true,
                'customer' => true,
                'displayname' => true,
                'redirecturl' => true,
                'mode' => true,
                'provision' => true,
                'sipaccount' => true,
                'sippass' => true,
                'sipurl' => true,
                'z_updater' => true
            ),
            'template' => array (
                'pkey' => true, 
                'parent' => true,
                'customer' => true,
                'provision' => true,
                'z_updater' => true
            )
        );  

    public function __construct($db,$input,$response)
    {
       	
       $this->db = $db;
       $this->input = $input;
       $this->response = $response;
       $this->helper = new modelHelper();

    }

    public function post($table) 
    { 
		if (empty($this->input['pkey'])) {
        	$result ['reason'] = "EMPTY PRIMARY KEY";
            return $this->response->withJson($result,400);      	
    	}
/*
    add any table specific requirements here
 */
        switch ($table) {

            case "endpoint":

// check a template name has been given
                if (empty($this->input['template'])) {
                    $result ['reason'] = "EMPTY template KEY";
                    return $this->response->withJson($result,400);          
                }

// get the vendor name from the MAC address
                $this->input['vendor'] = $this->helper->getVendorFromMac($this->input['pkey']);

// copy the base provisioning directives from the base teemplate
                try {
                    $sth = $this->db->prepare("SELECT provision from template WHERE pkey=?");
                    $sth->execute(array($this->input['template'])); 
                    $result = $sth->fetchAll();
                } catch (exception $e) {
                    return $this->response->withJson($result,403);
                }
                if (empty($result)) }
                    $result ['reason'] = "Template " . input['template'] . ' DOES NOT EXIST ';
                    return $this->response->withJson($result,404);  
                }                  
                $this->input['provision'] = $result['provision'];  

                break;

            case "customer":
                break;

            case "template":
                break;

            default:            
        }        
    	$helper = new modelHelper();
    	$this->input['z_updater'] = $helper->getRemoteIP();
    	$cols = null;
    	$prep = null;
    	$vals = array();
    	foreach ($this->input as $key => $val) {
    		if (empty($this->columnName[$table][$key])) {
    			$result ['reason'] = "Invalid column " . $table . ' => ' . $key;
            	return $this->response->withJson($result,403);
    		}
    		else {
    			$cols .= $key . ',';
    			$prep .= '?,';
    			$vals[] = $val;
    		}
    	}

    	if (empty($cols)) {
    			$result ['reason'] = "Empty column list";
            	return $this->response->withJson($result,403);    		
    	}
    	$cols = rtrim($cols,',');
    	$prep = rtrim($prep,',');

   		try {
        	$sth = $this->db->prepare("INSERT INTO $table ($cols) values ($prep)");
        	$sth->execute($vals);
//        	$sth->execute(array($input['mac'],$input['redirecturl'],$input['customer'],getRemoteIP()) );
        } catch (exception $e) {
        	if($e->errorInfo[1] === 1062) {
        		$result ['reason'] = "Duplicate KEY " . $this->input['pkey'];
        		return $this->response->withJson($result,403);
        	}
        	$result ['reason'] = $e->getMessage();
            return $this->response->withJson($result,500);        
        }        
    	return $this->response->withJson($this->input,201);
    }


}
